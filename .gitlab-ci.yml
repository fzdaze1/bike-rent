stages:
  - test
  - build
  - release

variables:
  DOCKER_DRIVER: overlay2

services:
  - name: docker:dind
    alias: docker
    command: ["--host=tcp://0.0.0.0:2375", "--host=unix:///var/run/docker.sock"]

before_script:
  - apk add --no-cache docker-compose
  - docker info
  - printenv

test:
  stage: test
  script:
    - echo "Creating .env file from GitLab CI/CD variables"
    - echo "SECRET_KEY=${SECRET_KEY}" > .env
    - echo "DEBUG=${DEBUG}" >> .env
    - echo "DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}" >> .env
    - echo "SQL_ENGINE=${SQL_ENGINE}" >> .env
    - echo "SQL_DATABASE=${SQL_DATABASE}" >> .env
    - echo "SQL_USER=${SQL_USER}" >> .env
    - echo "SQL_PASSWORD=${SQL_PASSWORD}" >> .env
    - echo "SQL_HOST=${SQL_HOST}" >> .env
    - echo "SQL_PORT=${SQL_PORT}" >> .env
    - echo "REDIS_HOST=${REDIS_HOST}" >> .env
    - echo "REDIS_PORT=${REDIS_PORT}" >> .env
    - echo "CELERY_BROKER_URL=${CELERY_BROKER_URL}" >> .env
    - echo "EMAIL_HOST_USER=${EMAIL_HOST_USER}" >> .env
    - echo "EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}" >> .env
    - docker-compose -f docker-compose.yml up -d --build
    - docker-compose -f docker-compose.yml exec web python manage.py migrate
    - docker-compose -f docker-compose.yml run web pytest
    - docker-compose -f docker-compose.yml down
  tags:
    - docker

build:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  script:
    - cd app
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker build -t ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_PROJECT_NAME}:${CI_COMMIT_REF_SLUG} .
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_PROJECT_NAME}:${CI_COMMIT_REF_SLUG}
  tags:
    - docker

release:
  stage: release
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker pull ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_PROJECT_NAME}:${CI_COMMIT_REF_SLUG}
    - docker tag ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_PROJECT_NAME}:${CI_COMMIT_REF_SLUG} ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_PROJECT_NAME}:latest
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_PROJECT_NAME}:latest
  when: manual
  tags:
    - docker
