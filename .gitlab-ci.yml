stages:
  - prepare
  - test
  - build
  - cleanup
  - deploy

variables:
  DOCKER_DRIVER: overlay2

services:
  - name: docker:dind
    alias: docker
    command: ["--host=tcp://0.0.0.0:2375", "--host=unix:///var/run/docker.sock"]

before_script:
  - apk add --no-cache docker-compose

before_script:
  - docker info
  - printenv

test:
  stage: prepare
  script:
    - echo "Creating .env file from GitLab CI/CD variables"
    - echo "SECRET_KEY=${SECRET_KEY}" > .env
    - echo "DEBUG=${DEBUG}" >> .env
    - echo "DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}" >> .env
    - echo "SQL_ENGINE=${SQL_ENGINE}" >> .env
    - echo "SQL_DATABASE=${SQL_DATABASE}" >> .env
    - echo "SQL_USER=${SQL_USER}" >> .env
    - echo "SQL_PASSWORD=${SQL_PASSWORD}" >> .env
    - echo "SQL_HOST=${SQL_HOST}" >> .env
    - echo "SQL_PORT=${SQL_PORT}" >> .env
    - echo "REDIS_HOST=${REDIS_HOST}" >> .env
    - echo "REDIS_PORT=${REDIS_PORT}" >> .env
    - echo "CELERY_BROKER_URL=${CELERY_BROKER_URL}" >> .env
    - docker-compose -f docker-compose.yml up -d --build
    - docker-compose -f docker-compose.yml exec web python manage.py migrate
    - docker-compose -f docker-compose.yml run web pytest
    - docker-compose -f docker-compose.yml down
  tags:
    - docker


# build:
#   stage: build
#   script:
#     - docker-compose -f docker-compose.yml build
#   artifacts:
#     paths:
#       - docker-compose.yml
#   tags:
#     - docker

# cleanup:
#   stage: cleanup
#   script:
#     - docker-compose -f docker-compose.yml down
#   tags:
#     - docker

# deploy:
#   stage: deploy
#   script:
#     - echo "Deploying to production server"
#     # Добавьте здесь команды для развертывания на вашем сервере
#     - docker-compose -f docker-compose.yml up -d
#   only:
#     - master
#   tags:
#     - docker
